services:
  mlflow:
    build: mlflow
    ports:
      - "5000:5000"
    command:
      - --host=0.0.0.0
    volumes:
      - ./data/mlruns:/mlruns
      - ./data/mlartifacts:/mlartifacts
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  inference:
    build: inference
    environment:
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8000
      - MLFLOW_MODEL_REGISTRY_HOST=mlflow
      - MLFLOW_MODEL_REGISTRY_PORT=5000
    ports:
      - "8000:8000"
    depends_on:
      mlflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    volumes:
      - ./data/buckets:/data:consistent
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: minio server /data --console-address=0.0.0.0:9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc rm -r --force myminio/mlflow;
      /usr/bin/mc mb myminio/mlflow;
      /usr/bin/mc policy set download myminio/mlflow;
      exit 0;
      "
