js_import validator from js/check_email.js;

# this extracts the authorization header from the request
map $http_authorization $header_token {
    "~*^Bearer (.*)$" $1;
    default $http_authorization;
}


server {
    listen 14000;
    http2 on;
    resolver 127.0.0.11 ipv6=off; # docker resolver
    include mime.types;    

    location = .validate_token  {
        internal;
        js_content validator.checkToken;
    }

    location /students/ {

        # we want to validate the token!
        auth_request .validate_token;
        error_page 401 = @unauthorized;
        error_page 403 = @forbidden;

        proxy_pass http://students:8080/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Authorization "Bearer $header_token";
        proxy_cache_bypass $http_upgrade;
    }

    location /grades/ {

        # we want to validate the token!
        auth_request .validate_token;
        error_page 401 = @unauthorized;
        error_page 403 = @forbidden;

        proxy_pass http://grades:8080/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Authorization "Bearer $header_token";
        proxy_cache_bypass $http_upgrade;
    }

    location @unauthorized {
        internal;
        default_type application/json;
        add_header Content-Type "application/json";

        return 400 '{ "success": false, "error": "gateway_bad_token" }';
    }
    location @forbidden {
        internal;
        default_type application/json;
        add_header Content-Type "application/json";

        return 400 '{ "success": false, "error": "email_not_verified" }';
    }

}
